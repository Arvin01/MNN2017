points(pca.data$x[(N[1]+1):N[2],1],pca.data$x[(N[1]+1):N[2],2], pch=1,cex=2,col=forcol[(N[1]+1):N[2]])
dev.off()
png(file="pca_lm.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(pca.data$x[1:N[1],1],pca.data$x[1:N[1],2], pch=21,col="black",cex=2,bg=forcol[1:N[1]],main="limma corrected",xlab="PC1",ylab="PC2"
,xlim=c(-0.025,0.06),ylim=c(-0.1,0.05))
points(pca.data$x[(N[1]+1):N[2],1],pca.data$x[(N[1]+1):N[2],2], pch=1,cex=2,col=forcol[(N[1]+1):N[2]])
dev.off()
png(file="pca_lm.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(pca.data$x[1:N[1],1],pca.data$x[1:N[1],2], pch=21,col="black",cex=2,bg=forcol[1:N[1]],main="limma corrected",xlab="PC1",ylab="PC2"
,xlim=c(-0.025,0.065),ylim=c(-0.1,0.05))
points(pca.data$x[(N[1]+1):N[2],1],pca.data$x[(N[1]+1):N[2],2], pch=1,cex=2,col=forcol[(N[1]+1):N[2]])
dev.off()
data<-corre[,selectid]
pca.data <- prcomp(t(data), center=TRUE)
pca.data$x<-cosine_norm(pca.data$x)
png(file="pca_mnn.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(pca.data$x[1:N[1],1],pca.data$x[1:N[1],2], pch=21,col="black",cex=2,bg=forcol[1:N[1]],main="MNN corrected",xlab="PC1",ylab="PC2"
,xlim=c(-0.025,0.03),ylim=c(-0.025,0.05))
points(pca.data$x[(N[1]+1):N[2],1],pca.data$x[(N[1]+1):N[2],2], pch=1,cex=2,col=forcol[(N[1]+1):N[2]])
dev.off()
data<-raw.all[,selectid]#cleandat.combat#raw.all#Xmnn$corrected#Xlm#Xlm#alpha_mnn#
N<-c(sum(batch==1),dim(data)[2])
pca.data <- prcomp(t(data), center=TRUE)
pca.data$x<-cosine_norm(pca.data$x)
pca.data$x[(pca.data$x[,2]< (-0.1)),2]<-(-0.1)
png(file="pca_raw.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(pca.data$x[1:N[1],1],pca.data$x[1:N[1],2], pch=21,col="black",cex=2,bg=forcol[1:N[1]],main="Uncorrected",xlab="PC1",ylab="PC2"
,xlim=c(-0.07,0.023),ylim=c(-0.06,0.06))
points(pca.data$x[(N[1]+1):N[2],1],pca.data$x[(N[1]+1):N[2],2], pch=1,cex=2,col=forcol[(N[1]+1):N[2]])
dev.off()
save(list = ls(), file = "FAcorrected_alllog.RData")
source('~/Desktop/meso/mesoand700_24May.R')
rm(list=ls())
source('~/projects/BatchCorrection_codes/general_useful_R_functions/highvar.R')
source('~/projects/BatchCorrection_codes/general_useful_R_functions/cosine_norm.R')
library(scales)
#source('~/projects/BatchCorrection_codes/general_useful_R_functions/c_by_sizefactor.R')
require(WGCNA)
#source('~/projects/BatchCorrection_codes/mnn_correction5.R')
#require(destiny)
require(Rtsne)
source('~/projects/BatchCorrection_codes/general_useful_R_functions/matchENSgenenames.R')
require(scran)
wd<-"/Users/laleh/projects/Mesodermal"#working directory
setwd(wd)
#LOADING DATA AND PACKAGES ######
#required packages
require(Rtsne)
require(dynamicTreeCut)
require(DESeq2)
#require(ggplot2)
#require(grid)
library(scales)
require(WGCNA)
#load data&metadata (downloaded from http://gastrulation.stemcells.cam.ac.uk/scialdone2016)
data.meso<-read.table("counts.txt", head=T)
meta.data<-read.table("metadata.txt", head=T)
meso.cluster<-as.character(meta.data$cluster)#as.character(meta.data[colnames(data.meso),"cluster"])
meso.stage<-as.character(meta.data$embryoStage)
row.names(meta.data)<-meta.data[,"cellName"]
#load highly variable genes (HVG)
#(see http://www.nature.com/nmeth/journal/v10/n11/extref/nmeth.2645-S2.pdf for the R code to find highly variable genes)
load("high_var_genes.RData")#HVG across all cells
#setwd("/Users/laleh/Desktop")
#sf.genes<-estimateSizeFactorsForMatrix(data.meso) #estimate size factor
#data.meso<-t( t(data.meso) / sf.genes)
#################
sce = newSCESet(countData = data.meso)
#filter low abundance genes
sce = sce[calcAverage(sce)>0.1,]
clusts <- quickCluster(sce, min.size=120)
#number of cells in each cluster should be at least twice that of the largest 'sizes'
min.clust = min(table(clusts))/2
new_sizes = c(floor(min.clust/3), floor(min.clust/2), floor(min.clust))
sce = computeSumFactors(sce, clusters = clusts, sizes = new_sizes)
#extract size factors
sfs = sizeFactors(sce)
#normalise data
sce = normalise(sce)
#dataF2 <- data.frame(exprs(sce))
data.meso <- t(t(counts(sce))/sizeFactors(sce))
data.meso<-log(1+data.meso)
#################
# data1<-log(norm.data[high.var.genes.all,]+1)
# data2<-log(norm.data.tal[high.var.genes.all,]+1)
#data1<-norm.data[high.var.genes.all,]
#data2<-norm.data.tal[high.var.genes.all,]
#cluster<-as.character(meta.data[colnames(data),"cluster"])
###############################################
setwd("/Users/laleh/projects/10x_700cells_E3p5/")
data.700<-read.table("Total_table_NoTrof.bed",sep="\t",stringsAsFactors = F, head=T)
datainfo<-read.table("Cell_clusters.txt",sep="\t",stringsAsFactors = F, head=T)
# strReverse <- function(x)
#        sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
#even_indexes<-seq(2,248,2)
batch<-datainfo$Plate
#sf.genes<-estimateSizeFactorsForMatrix(data.700) #estimate size factor
#data.700<-t( t(data.700) / sf.genes)
######################
sce = newSCESet(countData = data.700)
#filter low abundance genes
sce = sce[calcAverage(sce)>0.1,]
clusts <- quickCluster(sce, min.size=120)
#number of cells in each cluster should be at least twice that of the largest 'sizes'
min.clust = min(table(clusts))/2
new_sizes = c(floor(min.clust/3), floor(min.clust/2), floor(min.clust))
sce = computeSumFactors(sce, clusters = clusts, sizes = new_sizes)
#extract size factors
sfs = sizeFactors(sce)
#normalise data
sce = normalise(sce)
#dataF2 <- data.frame(exprs(sce))
data.700 <- t(t(counts(sce))/sizeFactors(sce))
data.700<-log(1+data.700)
#######################
Stage<-datainfo$Stage
Lineage<-datainfo$Lineage
genes.700<-row.names(data.700)
#hvg.700<-find.high.var.biol.genes(data.700, genes.700, red.line=TRUE, 0.01,minMean=0.01, plot=TRUE)
#hvg.700<-hvg.700$genes.high.var
#hvg.700<-hvg.700[-which(is.na(hvg.700))]
out<-matchgenenamestoENS(row.names(data.meso),idknown = TRUE)
dupls<-which(duplicated(out$ensembl_gene_id))
if (length(dupls)>0) {
out<-out[-dupls,]
data.meso<-data.meso[-dupls,]}
dupls<-which(duplicated(out$mgi_symbol))
if (length(dupls)>0) {
out<-out[-dupls,]
data.meso<-data.meso[-dupls,]
}
genes.700<-gsub( "_.*$", "", genes.700)
dupl700<-which(duplicated(genes.700))
if (length(dupl700)>0) {
genes.700<-genes.700[-dupl700]
data.700<-data.700[-dupl700,]
}
row.names(data.700)<-genes.700
#nas<-which(is.na(rowSums(data.700)))
#data.700<-data.700[-nas,]
#genes.700<-genes.700[-nas]
#data.norm<-c_by_sizefactor(data[hvg,])
#data.norm<-log(1+c_by_sizefactor(data.700))
commongenes<-intersect(out$mgi_symbol,row.names(data.700))
out2<-matchgenenamestoENS(commongenes,idknown=FALSE)
dupls<-which(duplicated(out2$mgi_symbol))
if (length(dupls)>0) {
out2<-out2[-dupls,]}
dupls<-which(duplicated(out2$ensembl_gene_id))
#out2<-out2[-dupls,]
#finalgenes<-intersect(out2$ensembl_gene_id,row.names(data.meso))
data.700.2<-data.700[out2$mgi_symbol,]
data.meso.2<-data.meso[match(out2$ensembl_gene_id,row.names(data.meso)),]
row.names(data.meso.2)<-row.names(data.700.2)
nas<-which(is.na(rowSums(data.meso.2)))
data.meso.2<-data.meso.2[-nas,]
data.700.2<-data.700.2[-nas,]
unigenes<-union(hvg.700,hvg.meso)
data700<-data.700.2[unigenes,]
datameso<-data.meso.2[unigenes,]
#save(file="scran_meso700.Rdata",data.meso.2,data.700.2)
# selectids<-which(meso.cluster=="turquoise" | meso.cluster=="pink" | meso.cluster=="magenta")
# datameso.s<-datameso[,selectids]
# meso.cluster.s<-meso.cluster[selectids]
# meso.stage.s<-meso.stage[selectids]
dim(data.meso.2)
dim(data.700.2)
save(file="scran_meso700.Rdata",data.meso.2,data.700.2)
getwd()
source('~/projects/10x_700cells_E3p5/mesoand700_9.R')
png(file="uncGast.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.unc$Y[1:N[1],1],tsne.unc$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(allcolors[1:N[1]],0.6),main="Uncorrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-10,12),ylim=c(-12,12))
points(tsne.unc$Y[(N[1]+1):N[2],1],tsne.unc$Y[(N[1]+1):N[2],2], pch=21,cex=2.5,col="black",bg=(allcolors[(N[1]+1):N[2]]))
dev.off()
save(file="corrected_meso700.Rdata",data.meso.2,data.700.2)
save(file="corrected_meso700.Rdata",list=ls())
getwd()
png(file="Raw_Mesp1.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.unc$Y[1:N[1],1],tsne.unc$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol1[1:N[1]],0.6),main=" Mesp1 uncorrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-10,12),ylim=c(-12,12))
points(tsne.unc$Y[(N[1]+1):N[2],1],tsne.unc$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol1[(N[1]+1):N[2]],0.6))
dev.off()
png(file="Raw_T.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.unc$Y[1:N[1],1],tsne.unc$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol2[1:N[1]],0.6),main="T uncorrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-10,12),ylim=c(-12,12))
points(tsne.unc$Y[(N[1]+1):N[2],1],tsne.unc$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol2[(N[1]+1):N[2]],0.6))
dev.off()
png(file="Raw_Mettl7a3.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.unc$Y[1:N[1],1],tsne.unc$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol3[1:N[1]],0.6),main="Mettl7a3 uncorrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-10,12),ylim=c(-12,12))
points(tsne.unc$Y[(N[1]+1):N[2],1],tsne.unc$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol3[(N[1]+1):N[2]],0.6))
dev.off()
png(file="MNNGast2.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.c$Y[1:N[1],1],tsne.c$Y[1:N[1],2],pch=17,cex=2.5,col=alpha(allcolors[1:N[1]],0.6),main="MNN corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-5,5),ylim=c(-6,6))
points(tsne.c$Y[(N[1]+1):N[2],1],tsne.c$Y[(N[1]+1):N[2],2], pch=21,cex=2.5,col="black",bg=allcolors[(N[1]+1):N[2]])
dev.off()
png(file="MNN_Mesp1.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.c$Y[1:N[1],1],tsne.c$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol1[1:N[1]],0.6),main=" Mesp1 MNN corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-5,5),ylim=c(-6,6))
points(tsne.c$Y[(N[1]+1):N[2],1],tsne.c$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol1[(N[1]+1):N[2]],0.6))
dev.off()
png(file="MNN_T.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.c$Y[1:N[1],1],tsne.c$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol2[1:N[1]],0.6),main="T MNN corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-5,5),ylim=c(-6,6))
points(tsne.c$Y[(N[1]+1):N[2],1],tsne.c$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol2[(N[1]+1):N[2]],0.6))
dev.off()
png(file="MNN_Mettl7a3.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.c$Y[1:N[1],1],tsne.c$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol3[1:N[1]],0.6),main="Mettl7a3 MNN corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-5,5),ylim=c(-6,6))
points(tsne.c$Y[(N[1]+1):N[2],1],tsne.c$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol3[(N[1]+1):N[2]],0.6))
dev.off()
png(file="limmaGast.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.lm$Y[1:N[1],1],tsne.lm$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(allcolors[1:N[1]],0.6),main="limma corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-7,9),ylim=c(-6,6))
points(tsne.lm$Y[(N[1]+1):N[2],1],tsne.lm$Y[(N[1]+1):N[2],2], pch=21,cex=2.5,col="black",bg=(allcolors[(N[1]+1):N[2]]))
dev.off()
png(file="limma_Mesp1.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.lm$Y[1:N[1],1],tsne.lm$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol1[1:N[1]],0.6),main=" Mesp1 limma corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-7,9),ylim=c(-6,6))
points(tsne.lm$Y[(N[1]+1):N[2],1],tsne.lm$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol1[(N[1]+1):N[2]],0.6))
dev.off()
png(file="limma_T.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.lm$Y[,1],tsne.lm$Y[,2], pch=17,cex=2.5,col=alpha(datCol2[1:N[1]],0.6),main="T limma corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-7,9),ylim=c(-6,6))
points(tsne.lm$Y[(N[1]+1):N[2],1],tsne.lm$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol2[(N[1]+1):N[2]],0.6))
dev.off()
png(file="limma_Mettl7a3.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.lm$Y[1:N[1],1],tsne.lm$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol3[1:N[1]],0.6),main="Mettl7a3 limma corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-7,9),ylim=c(-6,6))
points(tsne.lm$Y[(N[1]+1):N[2],1],tsne.lm$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol3[(N[1]+1):N[2]],0.6))
dev.off()
png(file="Combat_Mesp1.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.combat$Y[1:N[1],1],tsne.combat$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol1[1:N[1]],0.6),main="Mesp1 ComBat corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-9,9),ylim=c(-15,12))
points(tsne.combat$Y[(N[1]+1):N[2],1],tsne.combat$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol1[(N[1]+1):N[2]],0.6))
dev.off()
png(file="Combat_Mesp1.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.combat$Y[1:N[1],1],tsne.combat$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol1[1:N[1]],0.6),main="Mesp1 ComBat corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-9,9),ylim=c(-16,12))
points(tsne.combat$Y[(N[1]+1):N[2],1],tsne.combat$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol1[(N[1]+1):N[2]],0.6))
dev.off()
png(file="Combat_T.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.combat$Y[1:N[1],1],tsne.combat$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol2[1:N[1]],0.6),main="T ComBat corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-9,9),ylim=c(-16,12))
points(tsne.combat$Y[(N[1]+1):N[2],1],tsne.combat$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol2[(N[1]+1):N[2]],0.6))
dev.off()
png(file="Combat_Mettl7a3.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.combat$Y[1:N[1],1],tsne.combat$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(datCol3[1:N[1]],0.6),main="Mettl7a3 ComBat corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-9,9),ylim=c(-16,12))
points(tsne.combat$Y[(N[1]+1):N[2],1],tsne.combat$Y[(N[1]+1):N[2],2], pch=20,cex=3,col=alpha(datCol3[(N[1]+1):N[2]],0.6))
dev.off()
png(file="CombatGast.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.combat$Y[1:N[1],1],tsne.combat$Y[1:N[1],2], pch=17,cex=2.5,col=alpha(allcolors[1:N[1]],0.6),main="ComBat corrected"
,xlab="tSNE 1",ylab="tSNE 2",xlim=c(-9,9),ylim=c(-16,12))
points(tsne.combat$Y[(N[1]+1):N[2],1],tsne.combat$Y[(N[1]+1):N[2],2], pch=21,cex=2.5,col="black",bg=(allcolors[(N[1]+1):N[2]]))
dev.off()
Z <- colnames(raw.all)
cleandat.combat <- ComBat(raw.all,Z,mod=NULL,prior.plots = FALSE)
getwd()
color.bar <- function(lut, min, max=-min, nticks=11, ticks=seq(min, max, len=nticks), title='') {
scale = (length(lut)-1)/(max-min)
dev.new(width=1.75, height=5)
plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)
axis(2, ticks, las=1)
for (i in 1:(length(lut)-1)) {
y = (i-1)/scale + min
rect(0,y,10,y+1/scale, col=lut[i], border=NA)
}
}
png(file="Combat_leg.png",width=900,height=700)
color.bar(colorRampPalette(c("blue", "yellow", "red"))(100), -1)
dev.off()
getwd()
png(file="Combat_leg.png",width=900,height=700)
color.bar(colorRampPalette(c("blue", "yellow", "red"))(100), -1)
dev.off()
color.bar <- function(lut, min, max=-min, nticks=11, ticks=seq(min, max, len=nticks), title='') {
scale = (length(lut)-1)/(max-min)
dev.new(width=1.75, height=5)
plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)
axis(2, ticks, las=1)
for (i in 1:(length(lut)-1)) {
y = (i-1)/scale + min
rect(0,y,10,y+1/scale, col=lut[i], border=NA)
}
}
png(file="Combat_leg.png",width=900,height=700)
color.bar(colorRampPalette(c("blue", "yellow", "red"))(100), -1)
dev.off()
color.bar(colorRampPalette(c("blue", "yellow", "red"))(100), -1)
rm(list=ls())
load("/Users/laleh/projects/Adult_haematopoiesis/FAcorrected_alllog.RData")
getwd()
setwd("/Users/laleh/Desktop")
png(file="uncFA.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(6,6,4,2),cex.axis=2,cex.main=3,cex.lab=2.5)
plot(tsne.unc$Y[1:N[1],1],tsne.unc$Y[1:N[1],2], pch=21,col="black",cex=2,bg=allcolors[1:N[1]],main="Uncorrected",xlim=c(-35,35),ylim=c(-35,40),xlab="tSNE 1",ylab="tSNE 2")
points(tsne.unc$Y[(N[1]+1):N[2],1],tsne.unc$Y[(N[1]+1):N[2],2], pch=1,cex=2,col=allcolors[(N[1]+1):N[2]])
dev.off()
rm(list=ls())
load("/Users/laleh/projects/pancreas2/Panccorrected.Rdata")
load("/Users/laleh/projects/pancreas2/raw_complete4DataSets.RData")
table(celltype1)
table(celltype2)
table(celltype3)
table(celltype4)
length(celltype3)
length(celltype3)-(886+270+197+114+185+386)
196/1189  #+133+ 15 +51+ 257+ 537
961+	612+	98+	206+	280+	247+	0
886+	270+	197+	114	+185+	386+	150
838	+478+	82	+52
133/1189
15/1189
51/1189
257/1189
537/1189
961/2404
612/2404
98/2404
206/2404
280/2404
247/2404
886/2188
270/2188
197/2188
114/2188
185/2188
386/2188
150/2188
838/1450
478/1450
82/1450
52/1450
source('~/Downloads/blah/scran/R/mnnCorrect.R')
source('~/projects/deposit/Panc/data_preparation.R')
source('~/projects/deposit/Panc/FourPlots4_panc.R')
source('~/projects/deposit/Panc/FourPlots4_panc.R')
save(file="Panccorrected.Rdata",list=ls())
library(scran)
cosine_norm()
?cosine_norm
?cosine.norm
cosine_norm()
cosine_norm(1)
cosine_norm([1,2])
?scran::cosine.norm
??scran::cosine.norm
??cosine.norm
rm(list=ls())
load("/Users/laleh/projects/deposit/Panc/figs/Panccorrected.Rdata")
View(cosine_norm)
View(cosine.norm)
S<-scran::cosine.norm(corre)
source('~/projects/deposit/Panc/entropyandpcastest.R')
En
rm(list=ls())
load("/Users/laleh/projects/deposit/Panc/figs/Panccorrected.Rdata")
rm(list=ls())
load("/Users/laleh/projects/pancreas2/panc_loc_glob.Rdata")
getwd()
sils<-cbind(sil_c2,sil_c1)
colMeans(sils)
boxplot(sils)
png(file="sils_loc_pub.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(8,8,5,3),cex.axis=3,cex.main=2,cex.lab=3)
boxplot(sils,main="",names=c("Local","Public"),lwd=4,ylab="Silhouette coefficient")#,col="Yellow",ylab="Alpha dists")
dev.off()
png(file="sils_loc_pub.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(8,8,5,3),cex.axis=3,cex.main=2,cex.lab=3)
boxplot(sils,main="",names=c("Local","Global"),lwd=4,ylab="Silhouette coefficient")#,col="Yellow",ylab="Alpha dists")
dev.off()
png(file="entropy_loc_pub.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(8,8,5,3),cex.axis=3,cex.main=2,cex.lab=3)
boxplot(En,main="",names=c("Local","Global"),lwd=4,ylab="Entorpy of batch mixing")#,col="Yellow",ylab="Alpha dists")
dev.off()
En<-cbind(entrop.loc,entrop.glob)
dataset<-pca.mnn2$x[,1:2]#pca.mnn$x[,1:2]
L=100
entropy<-matrix(0,L,1)
set.seed(0)
for (boot in 1:L) {
bootsamples<-sample(1:dim(raw.all)[2],100)
W21<-nn2(dataset,query=dataset[bootsamples,],k=500)
for (i in 1:length(bootsamples)){
x1<-max(1,sum(batch0[W21$nn.idx[i,]]==1))
x2<-max(1,sum(batch0[W21$nn.idx[i,]]==2))
x3<-max(1,sum(batch0[W21$nn.idx[i,]]==3))
x4<-max(1,sum(batch0[W21$nn.idx[i,]]==4))
entropy[boot]<-entropy[boot]+x1*log(x1)+x2*log(x2)+x3*log(x3)+x4*log(x4)
}
#W21$nn.idx<-W21$nn.idx[,-1]  #precaution to remove self neighbour when data1==data2
}
entrop.glob<-(-1)*entropy/length(bootsamples)
dataset<-pca.mnn$x[,1:2]
L=100
entropy<-matrix(0,L,1)
set.seed(0)
for (boot in 1:L) {
bootsamples<-sample(1:dim(raw.all)[2],100)
W21<-nn2(dataset,query=dataset[bootsamples,],k=500)
for (i in 1:length(bootsamples)){
x1<-max(1,sum(batch0[W21$nn.idx[i,]]==1))
x2<-max(1,sum(batch0[W21$nn.idx[i,]]==2))
x3<-max(1,sum(batch0[W21$nn.idx[i,]]==3))
x4<-max(1,sum(batch0[W21$nn.idx[i,]]==4))
entropy[boot]<-entropy[boot]+x1*log(x1)+x2*log(x2)+x3*log(x3)+x4*log(x4)
}
#W21$nn.idx<-W21$nn.idx[,-1]  #precaution to remove self neighbour when data1==data2
}
entrop.loc<-(-1)*entropy/length(bootsamples)
#entrop.glob<-(-1)*entropy/length(bootsamples)
En<-cbind(entrop.loc,entrop.glob)
png(file="entropy_loc_pub.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(8,8,5,3),cex.axis=3,cex.main=2,cex.lab=3)
boxplot(En,main="",names=c("Local","Global"),lwd=4,ylab="Entorpy of batch mixing")#,col="Yellow",ylab="Alpha dists")
dev.off()
dataset<-pca.mnn1$x[,1:2]
L=100
entropy<-matrix(0,L,1)
set.seed(0)
for (boot in 1:L) {
bootsamples<-sample(1:dim(raw.all)[2],100)
W21<-nn2(dataset,query=dataset[bootsamples,],k=500)
for (i in 1:length(bootsamples)){
x1<-max(1,sum(batch0[W21$nn.idx[i,]]==1))
x2<-max(1,sum(batch0[W21$nn.idx[i,]]==2))
x3<-max(1,sum(batch0[W21$nn.idx[i,]]==3))
x4<-max(1,sum(batch0[W21$nn.idx[i,]]==4))
entropy[boot]<-entropy[boot]+x1*log(x1)+x2*log(x2)+x3*log(x3)+x4*log(x4)
}
#W21$nn.idx<-W21$nn.idx[,-1]  #precaution to remove self neighbour when data1==data2
}
entrop.loc<-(-1)*entropy/length(bootsamples)
En<-cbind(entrop.loc,entrop.glob)
png(file="entropy_loc_pub.png",width=900,height=700)
par(mfrow=c(1,1),mar=c(8,8,5,3),cex.axis=3,cex.main=2,cex.lab=3)
boxplot(En,main="",names=c("Local","Global"),lwd=4,ylab="Entorpy of batch mixing")#,col="Yellow",ylab="Alpha dists")
dev.off()
rm(list=ls())
source('~/projects/deposit/Haem/AH_genespickedbyFiona.R')
source('~/projects/deposit/Haem/AH_genespickedbyFiona.R')
library(biomaRt)
matchgenenamestoENS<-function(genesnames,idknown=TRUE){
library(biomaRt)
mart <- useMart("ensembl", dataset = "mmusculus_gene_ensembl", host="www.ensembl.org" )
if (idknown==TRUE){
out = getBM(attributes = c("ensembl_gene_id", "mgi_symbol"), values = genesnames, mart = mart,filters = "ensembl_gene_id")#
}
else{
out = getBM(attributes = c("ensembl_gene_id", "mgi_symbol"), values = genesnames, mart = mart,filters = "mgi_symbol")
}
return(out)
}
source('~/projects/deposit/Haem/AH_genespickedbyFiona.R')
c_by_sizefactor<-function(X){
G<-dim(X)[1]
n<-dim(X)[2]
cellnorm<-colSums(X)
cellnorm.nonzero<-cellnorm
cellnorm.nonzero[which(cellnorm==0)]<-1
Y<-X/matrix(rep(cellnorm.nonzero,each=G),G,n)
}
dataF2<-(c_by_sizefactor(dataF2))
dataA2<-(c_by_sizefactor(dataA2))  #
logdataF3<-(log(1+dataF2))
logdataA3<-(log(1+dataA2))
#
save(list=c("logdataA3","logdataF3"),file="logdataFandA_all.RData")
source('~/Downloads/blah/scran/R/mnnCorrect.R')
source('~/projects/deposit/Haem/FourPlots5_FA.R')
source('~/projects/deposit/Haem/pc1stest_2.R')
source('~/projects/deposit/Haem/pc1stest_2.R')
rm(list=ls())
source('~/projects/deposit/Simulations/simulateBatches.R')
dev.off()
plot(samples2, pch=16,cex=1.5,col=(clust2))
plot(cars) > par(mfrow=c(2,2))  plot(cars)
par(mfrow=c(2,2)) # plot(cars)
plot(cars)
dev.off()
plot(cars)
plot(mtcars)
par(resetPar())
dev.off()
plot(mtcars)
par(mfrow=c(2,2)) # plot(cars)
dev.off()
plot(cars)
